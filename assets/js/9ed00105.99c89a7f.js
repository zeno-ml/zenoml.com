"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[4],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(p,".").concat(m)]||u[m]||s[m]||o;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:3},l="Configuration file",r={unversionedId:"configuration",id:"configuration",title:"Configuration file",description:"Zeno options are set using a TOML file such as the following:",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/docs/configuration",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Python API",permalink:"/docs/api"},next:{title:"Instance views",permalink:"/docs/views/"}},p={},c=[{value:"Configuration options",id:"configuration-options",level:2},{value:"<code>view</code>",id:"view",level:3},{value:"<code>tests</code>",id:"tests",level:3},{value:"<code>metadata</code>",id:"metadata",level:3},{value:"<code>models</code>",id:"models",level:3},{value:"<code>id_column</code>",id:"id_column",level:3},{value:"<code>data_column</code>",id:"data_column",level:3},{value:"<code>label_column</code>",id:"label_column",level:3},{value:"<code>data_path</code>",id:"data_path",level:3},{value:"<code>label_path</code>",id:"label_path",level:3},{value:"<code>batch_size</code>",id:"batch_size",level:3},{value:"<code>cache_path</code>",id:"cache_path",level:3},{value:"<code>samples</code>",id:"samples",level:3},{value:"<code>port</code>",id:"port",level:3}],d={toc:c};function s(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuration-file"},"Configuration file"),(0,i.kt)("p",null,"Zeno options are set using a ",(0,i.kt)("inlineCode",{parentName:"p"},"TOML")," file such as the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Example TOML configuration for an image classification task"',title:'"Example',TOML:!0,configuration:!0,for:!0,an:!0,image:!0,classification:!0,'task"':!0},'tests = "./tests/"\nview = "zenoml-image-classification"\nmetadata = "./metadata.csv"\nmodels = [\n    "./model_epochs_2.pth",\n    "./model_epochs_5.pth",\n    "./model_epochs_10.pth",\n    "./model_epochs_20.pth"\n]\ndata_path = "./data/"\ndata_column = "id"\ndata_type = "path"\n')),(0,i.kt)("p",null,"Which is used to run zeno with ",(0,i.kt)("inlineCode",{parentName:"p"},"zeno config.toml"),"."),(0,i.kt)("h2",{id:"configuration-options"},"Configuration options"),(0,i.kt)("p",null,"The configuration file has the the following options."),(0,i.kt)("h3",{id:"view"},(0,i.kt)("inlineCode",{parentName:"h3"},"view")),(0,i.kt)("p",null,"The Zeno View used for the given data and task, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"zenoml-image-classification"),". ",(0,i.kt)("strong",{parentName:"p"},"Required")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/views"},"Instance views")," for a list of available views."),(0,i.kt)("h3",{id:"tests"},(0,i.kt)("inlineCode",{parentName:"h3"},"tests")),(0,i.kt)("p",null,"Path to a directory with Python files implementing Zeno functions. ",(0,i.kt)("strong",{parentName:"p"},"Required")),(0,i.kt)("h3",{id:"metadata"},(0,i.kt)("inlineCode",{parentName:"h3"},"metadata")),(0,i.kt)("p",null,"Path to a ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"parquet")," file with metadata for data instances. ",(0,i.kt)("strong",{parentName:"p"},"Required")),(0,i.kt)("p",null,"Must have a column with unique identifiers for each instance, specificed by ",(0,i.kt)("a",{parentName:"p",href:"/docs/configuration#id_column"},(0,i.kt)("inlineCode",{parentName:"a"},"id_column")),"."),(0,i.kt)("h3",{id:"models"},(0,i.kt)("inlineCode",{parentName:"h3"},"models")),(0,i.kt)("p",null,"List of models to test. ",(0,i.kt)("strong",{parentName:"p"},"Required")),(0,i.kt)("p",null,"Can either be paths or strings which are passed directly to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api#Predict"},(0,i.kt)("inlineCode",{parentName:"a"},"load_model"))," function."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"id_column"},(0,i.kt)("inlineCode",{parentName:"h3"},"id_column")),(0,i.kt)("p",null,"The column with unique identifiers in the metadata file. ",(0,i.kt)("strong",{parentName:"p"},"Optional")),(0,i.kt)("p",null,"By default it is ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,i.kt)("h3",{id:"data_column"},(0,i.kt)("inlineCode",{parentName:"h3"},"data_column")),(0,i.kt)("p",null,"The column with either file names for data instances or raw data (e.g. text). ",(0,i.kt)("strong",{parentName:"p"},"Optional")),(0,i.kt)("p",null,"By default it is ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,i.kt)("h3",{id:"label_column"},(0,i.kt)("inlineCode",{parentName:"h3"},"label_column")),(0,i.kt)("p",null,"The column with either file names for data instances or raw data (e.g. text). ",(0,i.kt)("strong",{parentName:"p"},"Optional")),(0,i.kt)("p",null,"By default it is ",(0,i.kt)("inlineCode",{parentName:"p"},"label"),"."),(0,i.kt)("h3",{id:"data_path"},(0,i.kt)("inlineCode",{parentName:"h3"},"data_path")),(0,i.kt)("p",null,"The directory with data instances. ",(0,i.kt)("strong",{parentName:"p"},"Optional")),(0,i.kt)("h3",{id:"label_path"},(0,i.kt)("inlineCode",{parentName:"h3"},"label_path")),(0,i.kt)("p",null,"The directory with label files. ",(0,i.kt)("strong",{parentName:"p"},"Optional")),(0,i.kt)("h3",{id:"batch_size"},(0,i.kt)("inlineCode",{parentName:"h3"},"batch_size")),(0,i.kt)("p",null,"The batch size used when running inference. ",(0,i.kt)("strong",{parentName:"p"},"Optional")),(0,i.kt)("h3",{id:"cache_path"},(0,i.kt)("inlineCode",{parentName:"h3"},"cache_path")),(0,i.kt)("p",null,"Where cache outputs are stored. ",(0,i.kt)("strong",{parentName:"p"},"Optional")),(0,i.kt)("p",null,"By default it is ",(0,i.kt)("inlineCode",{parentName:"p"},".zeno_cache")," in the same directory as the ",(0,i.kt)("inlineCode",{parentName:"p"},"TOML")," file. Cache stores preprocesssing and model outputs."),(0,i.kt)("h3",{id:"samples"},(0,i.kt)("inlineCode",{parentName:"h3"},"samples")),(0,i.kt)("p",null,"Number of samples to show by default in view. Default 30. ",(0,i.kt)("strong",{parentName:"p"},"Optional")),(0,i.kt)("h3",{id:"port"},(0,i.kt)("inlineCode",{parentName:"h3"},"port")),(0,i.kt)("p",null,"The port to run Zeno on. ",(0,i.kt)("strong",{parentName:"p"},"Optional")))}s.isMDXComponent=!0}}]);