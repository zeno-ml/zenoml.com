"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[250],{4889:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=a(7462),i=(a(7294),a(3905)),p=a(614);const o={},r="View Specification",l={unversionedId:"views/spec/spec",id:"views/spec/spec",title:"View Specification",description:"With the View Specifications, you can create a custom Instance View for your specific data.",source:"@site/docs/views/spec/spec.mdx",sourceDirName:"views/spec",slug:"/views/spec/",permalink:"/docs/views/spec/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Standard Views",permalink:"/docs/views/existing"},next:{title:"View Elements",permalink:"/docs/views/spec/other"}},s={},d=[{value:"View Specification",id:"view-specification-1",level:2},{value:"Properties",id:"properties",level:4}],c={toc:d},m="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"view-specification"},"View Specification"),(0,i.kt)("p",null,"With the View Specifications, you can create a custom Instance View for your specific data.\nUnder the hood, Zeno converts all the ",(0,i.kt)("a",{parentName:"p",href:"/docs/views/existing"},"Standard Views")," into these View Specifications.\nFor example, the ",(0,i.kt)("strong",{parentName:"p"},"image-classification")," view turns into:"),(0,i.kt)(p.Z,{language:"json",mdxType:"CodeBlock"},'{\n  "data": {\n    "type": "image"\n  },\n  "label": {\n    "type": "text"\n  },\n  "output": {\n    "type": "text"\n  }\n}\n'),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," is one of the ",(0,i.kt)("a",{parentName:"p",href:"/docs/views/spec/other"},"View Element")," types. You can explore all the available preconfigured view specifications and experiment with your own specification using the ",(0,i.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/"},"Instance View Playground"),".\nIf you want to learn how to write your own view specification, the following should help you get started."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Check out the ",(0,i.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/"},"Instance View Playground")," to test out existing views and prototype new custom views.")),(0,i.kt)("h2",{id:"view-specification-1"},"View Specification"),(0,i.kt)("p",null,"The top level of the View Specification contains keys for the three main inputs, ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"label"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"output"),", and an optional ",(0,i.kt)("inlineCode",{parentName:"p"},"displayType"),":"),(0,i.kt)(p.Z,{language:"json",title:"View Specification",mdxType:"CodeBlock"},'{\n  "data": ...,\n  "label": ...,\n  "output": ...,\n  "displayType": ...\n}\n'),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"displayType")," is omitted (default), each of ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"label"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"output"),"is a ",(0,i.kt)("a",{parentName:"p",href:"/docs/views/spec/other"},"ViewElement"),". If using the",(0,i.kt)("inlineCode",{parentName:"p"},"table")," ",(0,i.kt)("inlineCode",{parentName:"p"},"displayType"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"label"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," should be ",(0,i.kt)("a",{parentName:"p",href:"/docs/views/spec/other"},"TableElement")," entries."),(0,i.kt)("h4",{id:"properties"},"Properties"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"data"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement")," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/table"},"TableElement")),(0,i.kt)("td",{parentName:"tr",align:null},"How to render data entries.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"label"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement")," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/table"},"TableElement")),(0,i.kt)("td",{parentName:"tr",align:null},"How to render label entries.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"output"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement")," ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/table"},"TableElement")),(0,i.kt)("td",{parentName:"tr",align:null},"How to render output entries.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"displayType"),(0,i.kt)("td",{parentName:"tr",align:null},"Optional","[String]"),(0,i.kt)("td",{parentName:"tr",align:null},"How to display data, label, and output entries. The default view is a vertical list and each of ",(0,i.kt)("inlineCode",{parentName:"td"},"data"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"label")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"output")," must be ",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement"),"s. If set to ",(0,i.kt)("inlineCode",{parentName:"td"},'"table"'),", ",(0,i.kt)("inlineCode",{parentName:"td"},"data"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"label"),", and ",(0,i.kt)("inlineCode",{parentName:"td"},"output")," must ",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/table"},"TableElement"),"s.")))))}u.isMDXComponent=!0}}]);