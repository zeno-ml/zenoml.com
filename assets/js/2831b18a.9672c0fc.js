"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[640],{4597:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var n=a(7462),l=(a(7294),a(3905)),i=a(614);const r={},o="View Elements",p={unversionedId:"views/spec/other",id:"views/spec/other",title:"View Elements",description:"A View Element defines how to interpret and display data in your Zeno Project.",source:"@site/docs/views/spec/other.mdx",sourceDirName:"views/spec",slug:"/views/spec/other",permalink:"/docs/views/spec/other",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"View Specification",permalink:"/docs/views/spec/"}},s={},d=[{value:"Text",id:"text",level:2},{value:"Properties",id:"properties",level:4},{value:"Image",id:"image",level:2},{value:"Audio",id:"audio",level:2},{value:"Code",id:"code",level:2},{value:"Markdown",id:"markdown",level:2},{value:"Message",id:"message",level:2},{value:"Properties",id:"properties-1",level:4},{value:"List",id:"list",level:2},{value:"Properties",id:"properties-2",level:4},{value:"VStack",id:"vstack",level:2},{value:"Properties",id:"properties-3",level:4},{value:"Separated Values",id:"separated-values",level:2},{value:"Properties",id:"properties-4",level:4}],m={toc:d},k="wrapper";function u(e){let{components:t,...a}=e;return(0,l.kt)(k,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"view-elements"},"View Elements"),(0,l.kt)("p",null,"A View Element defines how to interpret and display data in your Zeno Project.\nThe following view elements can be used in your Zeno Projects."),(0,l.kt)("h2",{id:"text"},"Text"),(0,l.kt)("p",null,"A plaintext view to display raw text data. See in ",(0,l.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/?params=eyJzYW1wbGUiOiJ0ZXh0LWNsYXNzaWZpY2F0aW9uIn0="},"this example"),"."),(0,l.kt)(i.Z,{language:"json",title:"Separated Values",mdxType:"CodeBlock"},'{\n  "type": "text",\n  "label": string\n}\n'),(0,l.kt)("h4",{id:"properties"},"Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"label"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional","[String]"),(0,l.kt)("td",{parentName:"tr",align:null},"Label to be added in front of the text data.")))),(0,l.kt)("h2",{id:"image"},"Image"),(0,l.kt)("p",null,"A view to display image data. Expects a URL to fetch the image from as its data input. See in ",(0,l.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/?params=eyJzYW1wbGUiOiJpbWFnZS1jbGFzc2lmaWNhdGlvbiJ9"},"this example"),"."),(0,l.kt)(i.Z,{language:"json",title:"Separated Values",mdxType:"CodeBlock"},'{\n  "type": "image",\n  "maxWidth": "small" | "medium" | "large" | "full" \n}\n'),(0,l.kt)("h2",{id:"audio"},"Audio"),(0,l.kt)("p",null,"A view to display audio data. Expects a URL to fetch the audio data from as its input. See in ",(0,l.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/?params=eyJzYW1wbGUiOiJhdWRpby10cmFuc2NyaXB0aW9uIn0="},"this example"),"."),(0,l.kt)(i.Z,{language:"json",title:"Separated Values",mdxType:"CodeBlock"},'{\n  "type": "audio"\n}\n'),(0,l.kt)("h2",{id:"code"},"Code"),(0,l.kt)("p",null,"A code-display with syntax highlighting. See in ",(0,l.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/?params=eyJzYW1wbGUiOiJjb2RlLWdlbmVyYXRpb24ifQ=="},"this example"),"."),(0,l.kt)(i.Z,{language:"json",title:"Separated Values",mdxType:"CodeBlock"},'{\n  "type": "code"\n}\n'),(0,l.kt)("h2",{id:"markdown"},"Markdown"),(0,l.kt)("p",null,"Markdown visualization for a more flexible text display. See in ",(0,l.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/?params=eyJzYW1wbGUiOiJjaGF0Ym90LW1hcmtkb3duIn0="},"this example"),"."),(0,l.kt)(i.Z,{language:"json",title:"Separated Values",mdxType:"CodeBlock"},'{\n  "type": "markdown"\n}\n'),(0,l.kt)("h2",{id:"message"},"Message"),(0,l.kt)("p",null,"Visualization of data in message bubbles akin to a chat view. See in ",(0,l.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/?params=eyJzYW1wbGUiOiJjaGF0Ym90In0="},"this example"),"."),(0,l.kt)(i.Z,{language:"json",title:"Separated Values",mdxType:"CodeBlock"},'{\n  "type": "message"\n  "plain": boolean,\n  "content": ViewElement | string,\n  "ownMessage": boolean,\n  "highlight": boolean\n}\n'),(0,l.kt)("h4",{id:"properties-1"},"Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"content"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement")," ","|"," String"),(0,l.kt)("td",{parentName:"tr",align:null},"Element to use to render the message content. If ",(0,l.kt)("inlineCode",{parentName:"td"},"plain == true"),", this is interpreted as a String and displayed as plain text instead of a OpenAI-style message object.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"plain"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional","[boolean]"),(0,l.kt)("td",{parentName:"tr",align:null},"How to render the content.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ownMessage"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional","[boolean]"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether this message should be displayed as incoming or outgoing. Can also be specified in the data if ",(0,l.kt)("inlineCode",{parentName:"td"},"plain == false"),". True for outgoing.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"highlight"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional","[boolean]"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether this message should be highlighted.")))),(0,l.kt)("h2",{id:"list"},"List"),(0,l.kt)("p",null,"A list of ViewElements. Can be used to render multiple view elements at once. See in ",(0,l.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/?params=eyJzYW1wbGUiOiJjaGF0Ym90In0="},"this example"),"."),(0,l.kt)(i.Z,{language:"json",title:"Separated Values",mdxType:"CodeBlock"},'{\n  "type": "list"\n  "elements": ViewElement,\n  "collapsible": "top" | "bottom",\n  "border": boolean,\n  "pad": boolean\n}\n'),(0,l.kt)("h4",{id:"properties-2"},"Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"elements"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement")),(0,l.kt)("td",{parentName:"tr",align:null},"Element used to render all the elements of the list.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"collapsible"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional","[String]"),(0,l.kt)("td",{parentName:"tr",align:null},"If specified, only renders four elements of the list per default but adds a ",(0,l.kt)("em",{parentName:"td"},"show more")," button to expand. Can specify either ",(0,l.kt)("inlineCode",{parentName:"td"},'"top"')," or ",(0,l.kt)("inlineCode",{parentName:"td"},'"bottom"'),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"border"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional","[boolean]"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to add a border around each list element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pad"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional","[boolean]"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to add padding to each list element.")))),(0,l.kt)("h2",{id:"vstack"},"VStack"),(0,l.kt)("p",null,"A vertical stack of keyed elements. Can be used to combine different element types. See in ",(0,l.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/?params=eyJzYW1wbGUiOiJyYWcifQ=="},"this example"),"."),(0,l.kt)(i.Z,{language:"json",title:"Separated Values",mdxType:"CodeBlock"},'{\n  "type": "vstack"\n  "keys": Record<string, ViewElement>\n}\n'),(0,l.kt)("h4",{id:"properties-3"},"Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"keys"),(0,l.kt)("td",{parentName:"tr",align:null},"Record<string:",(0,l.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement"),">"),(0,l.kt)("td",{parentName:"tr",align:null},"List of objects mapping from a String key to a ViewElement used to render the content of the data behind the key.")))),(0,l.kt)("h2",{id:"separated-values"},"Separated Values"),(0,l.kt)("p",null,"Splitting the data into columns using a specified separator. See in ",(0,l.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/?params=eyJzYW1wbGUiOiJzcGFjZS1zZXBhcmF0ZWQtdmFsdWVzIn0="},"this example"),"."),(0,l.kt)(i.Z,{language:"json",title:"Separated Values",mdxType:"CodeBlock"},'{\n  "type": "separatedValues",\n  "separator": string,\n  "header": string,\n  "highlight": boolean\n}\n'),(0,l.kt)("h4",{id:"properties-4"},"Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"separator"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"Character or sequence to separate the data with.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"header"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional","[String]"),(0,l.kt)("td",{parentName:"tr",align:null},"The heading of the row of data. Ignored if not specified.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"highlight"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional","[boolean]"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether or not to highlight the data that is being separated. Can be used to create an alternating pattern of rows in a table. ",(0,l.kt)("strong",{parentName:"td"},"Default: false"))))))}u.isMDXComponent=!0}}]);