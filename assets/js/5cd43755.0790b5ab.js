"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[517],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5120:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},o="Instance views",s={unversionedId:"views/views",id:"views/views",title:"Instance views",description:"Zeno Instance Views are modular renderers for different data types and tasks.",source:"@site/docs/views/views.mdx",sourceDirName:"views",slug:"/views/",permalink:"/docs/views/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deployment",permalink:"/docs/deployment"},next:{title:"Creating a view",permalink:"/docs/views/new-view"}},l={},u=[],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"instance-views"},"Instance views"),(0,a.kt)("p",null,"Zeno Instance Views are modular renderers for different data types and tasks.\nEach of the following views can be passed as the ",(0,a.kt)("inlineCode",{parentName:"p"},"view")," option to a TOML configuration file. To create a new or custom view see ",(0,a.kt)("a",{parentName:"p",href:"/docs/views/new-view"},"Creating a view")),(0,a.kt)("table",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"View Name"),(0,a.kt)("th",null,"Description")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"image-classification"),(0,a.kt)("td",null,"Display images with ground truth and predicted class labels. Works for both binary and multiclass classification. Requires image inputs and text or numeric outputs.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"text-classification"),(0,a.kt)("td",null,"Display text with ground truth and predicted class labels. Requires text inputs and text or numeric outputs.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"audio-transcription"),(0,a.kt)("td",null,"Display audio file along with outputed text, e.g. transcription. Requires audio inputs and text outputs.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"image-segmentation"),(0,a.kt)("td",null,"Display image with overlayed ground truth and predicted segmentation masks. Works for both binary segmentation. Requires image inputs and binary image outputs.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"code-generation"),(0,a.kt)("td",null,"Show formatted code input and code predictions. Use for evaluating code generation models such as Codex.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"chatbot"),(0,a.kt)("td",null,"Show input-output pairs from chatbot models. Use for evaluating models such as ChatGPT."))))}p.isMDXComponent=!0}}]);