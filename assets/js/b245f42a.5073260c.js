"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[250],{4889:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var n=a(7462),i=(a(7294),a(3905)),o=a(614);const r={},l="View Specification",p={unversionedId:"views/spec/spec",id:"views/spec/spec",title:"View Specification",description:"With the View Specifications, you can create a custom Instance View that is just right for your Zeno project.",source:"@site/docs/views/spec/spec.mdx",sourceDirName:"views/spec",slug:"/views/spec/",permalink:"/docs/views/spec/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Standard Views",permalink:"/docs/views/existing"},next:{title:"View Elements",permalink:"/docs/views/spec/other"}},s={},c=[{value:"Specification",id:"specification",level:2},{value:"Properties",id:"properties",level:4}],d={toc:c},u="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"view-specification"},"View Specification"),(0,i.kt)("p",null,"With the View Specifications, you can create a custom Instance View that is just right for your Zeno project.\nIn fact, under the hood, Zeno converts all the ",(0,i.kt)("a",{parentName:"p",href:"/docs/views/existing"},"Standard Views")," into such a specification.\nFor example, the ",(0,i.kt)("strong",{parentName:"p"},"image-classification")," view is converted into:"),(0,i.kt)(o.Z,{language:"json",mdxType:"CodeBlock"},'{\n  "data": {\n    "type": "image"\n  },\n  "label": {\n    "type": "text"\n  },\n  "output": {\n    "type": "text"\n  }\n}\n'),(0,i.kt)("p",null,"You can explore all the available preconfigured view specifications and experiment with your own specification on our ",(0,i.kt)("a",{parentName:"p",href:"https://zeno-ml.github.io/zeno-instance-views/"},"Instance View Playground"),".\nIf you want to learn how to write your own view specification, the following should help you get started."),(0,i.kt)("h2",{id:"specification"},"Specification"),(0,i.kt)("p",null,"Each Instance View starts with the definition of a Specification.\nThe Specification is defined as follows:"),(0,i.kt)(o.Z,{language:"json",title:"Toplevel",mdxType:"CodeBlock"},'{\n  "data": ...,\n  "label": ...,\n  "output": ...,\n  "displayType": ...\n}\n'),(0,i.kt)("h4",{id:"properties"},"Properties"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"data"),(0,i.kt)("td",{parentName:"tr",align:null},"Optional[",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifying how to interpret and display the data column of your Zeno Project.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"label"),(0,i.kt)("td",{parentName:"tr",align:null},"Optional[",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifying how to interpret and display the label column of your Zeno Project.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"output"),(0,i.kt)("td",{parentName:"tr",align:null},"Optional[",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifying how to interpret and display the ouptut column of your Zeno Project.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"displayType"),(0,i.kt)("td",{parentName:"tr",align:null},"Optional","[String]"),(0,i.kt)("td",{parentName:"tr",align:null},"The type of display this view uses. If this parameter is omitted, the default view with three sections for data, label, and output will be used. If set as ",(0,i.kt)("inlineCode",{parentName:"td"},'"table"'),", data, label, and output must be a ",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/table"},"TableElement")," instead of a ",(0,i.kt)("a",{parentName:"td",href:"/docs/views/spec/other"},"ViewElement"),".")))))}m.isMDXComponent=!0}}]);