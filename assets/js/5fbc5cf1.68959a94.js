"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[207],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?o.createElement(f,l(l({ref:t},p),{},{components:n})):o.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7480:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:4},l="Python API",i={unversionedId:"api",id:"api",title:"Python API",description:"Zeno has 4 primary decorator functions: model, metric, distill, and inference.",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/api",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Demos",permalink:"/docs/demos"},next:{title:"Configuration file",permalink:"/docs/configuration"}},s={},u=[{value:"ZenoOptions",id:"zenooptions",level:2},{value:"Model",id:"model",level:2},{value:"ModelReturn",id:"modelreturn",level:3},{value:"Example",id:"example",level:3},{value:"Metric",id:"metric",level:2},{value:"MetricReturn",id:"metricreturn",level:3},{value:"Example",id:"example-1",level:3},{value:"Distill",id:"distill",level:2},{value:"DistillReturn",id:"distillreturn",level:3},{value:"Example",id:"example-2",level:3},{value:"Inference",id:"inference",level:2},{value:"InferenceReturn",id:"inferencereturn",level:3},{value:"Example",id:"example-3",level:3}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-api"},"Python API"),(0,r.kt)("p",null,"Zeno has 4 primary decorator functions: ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"metric"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"distill"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"inference"),"."),(0,r.kt)("p",null,"You can pass any number of files with decorated functions to Zeno, but you ",(0,r.kt)("strong",{parentName:"p"},"must have only one ",(0,r.kt)("inlineCode",{parentName:"strong"},"model")),"."),(0,r.kt)("h2",{id:"zenooptions"},"ZenoOptions"),(0,r.kt)("p",null,"Every Zeno function is passed a ZenoOptions object with the following parameters.\nThe column values refer to column names in the DataFrame and the paths refer to directories relative to the Zeno configuration file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@dataclass\nclass ZenoOptions:\n    """Parameters passed to Zeno test functions.\n\n    Args:\n        id_column (str): Column in dataframe with unique identifiers.\n        data_column (str): Column in dataframe with either raw data or path to data.\n        label_column (str): Column in dataframe with\n                            either raw labels or path to labels.\n        output_column (str): Column in dataframe with a given\n                             model\'s raw output or path to output\n        data_path (str): Path to directory with data files.\n        label_path (str): Path to directory with label files.\n        output_path (str): Path to directory with a given model\'s output.\n        distill_columns (map[str, str]): Map from distiller name to distill column.\n    """\n\n    id_column: str\n    data_column: str\n    label_column: str\n    output_column: str\n    distill_columns: Dict[str, str]\n    data_path: str\n    label_path: str\n    output_path: str\n')),(0,r.kt)("h2",{id:"model"},"Model"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"model")," functions should return a function that returns a list of model outputs for a given model name."),(0,r.kt)("p",null,"The function returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"model")," should take two parameters: a Pandas DataFrame and a ZenoOptions object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@model\ndef model(model_path: Path) -> Callable[[df: DataFrame, ops: ZenoOptions], ModelReturn]\n")),(0,r.kt)("h3",{id:"modelreturn"},"ModelReturn"),(0,r.kt)("p",null,"The function should return the following object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class ModelReturn(BaseModel):\n    """Return type for model functions.\n\n    Args:\n        model_output (Series | List): Model output for each sample.\n        embedding (Series | List[List[float]] | List[NDArray] | NDArray | None):\n        High-dimensional embedding for each sample. Optional.\n        other_returns (Dict[str, Series | List] | None): Other returns from the model\n        to be shown as metadata columns in the UI.\n    """\n\n    model_output: Union[Series, List[Any]]\n    embedding: Union[Series, List[List[float]], List[NDArray], NDArray, None] = None\n    other_returns: Union[Dict[str, Union[Series, List[Any]]], None] = None\n')),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Load mock model and return outputs"',title:'"Load',mock:!0,model:!0,and:!0,return:!0,'outputs"':!0},"@model\ndef model_fn(model_path):\n    mod = load_model(model_path)\n    def pred(df: DataFrame, ops: ZenoOptions):\n        return ModelReturn(model_output=mod(df[ops.data_column]))\n    return pred\n")),(0,r.kt)("h2",{id:"metric"},"Metric"),(0,r.kt)("p",null,"Functions with the ",(0,r.kt)("inlineCode",{parentName:"p"},"metric")," decorator return a continuous number given a subset of data.\nMetrics can be classic functions such as accuracy, or specific measures such as word prevalence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@metric\ndef metric_func(df: pd.DataFrame, ops: ZenoOptions) -> MetricReturn:\n")),(0,r.kt)("h3",{id:"metricreturn"},"MetricReturn"),(0,r.kt)("p",null,"It should return the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class MetricReturn(BaseModel):\n    """Return type for metric functions.\n\n    Args:\n        metric (float): Average metric over subset of data\n        variance (float): Variance of metric over subset of data\n    """\n\n    metric: float\n    variance: Union[float, None] = None\n')),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Calculate accuracy of model"',title:'"Calculate',accuracy:!0,of:!0,'model"':!0},"@metric\ndef accuracy(df, ops):\n    return MetricReturn(metric=100 * (df[ops.label_column] == df[ops.output_column]).sum() / len(df))\n")),(0,r.kt)("h2",{id:"distill"},"Distill"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"distill")," functions return a derived metadata column from input data and/or model outputs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@distill\ndef distill_fn(df: pd.DataFrame, ops: ZenoOptions) -> DistillReturn:\n")),(0,r.kt)("h3",{id:"distillreturn"},"DistillReturn"),(0,r.kt)("p",null,"They should return the following object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class DistillReturn(BaseModel):\n    """Return type for distill functions\n\n    Args:\n        distill_output (Series | List): Distill outputs for each sample.\n    """\n\n    distill_output: Union[Series, List[Any]]\n')),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Get amplitude of sound file"',title:'"Get',amplitude:!0,of:!0,sound:!0,'file"':!0},"@distill\ndef amplitude(df, ops: ZenoOptions):\n    files = [os.path.join(ops.data_path, f) for f in df[ops.data_column]]\n    amps = []\n    for audio in files:\n        y, _ = librosa.load(audio)\n        amps.append(np.abs(y).mean())\n    return DistillReturn(distill_output=amps)\n")),(0,r.kt)("h2",{id:"inference"},"Inference"),(0,r.kt)("p",null,"You can create a ",(0,r.kt)("a",{parentName:"p",href:"https://gradio.app/"},"Gradio")," interface for your model by adding an ",(0,r.kt)("inlineCode",{parentName:"p"},"inference")," decorator.\nThis interface allows you to upload new instances and interactively test your model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@inference\ndef inference_fn(ops: ZenoOptions) -> InferenceReturn\n")),(0,r.kt)("h3",{id:"inferencereturn"},"InferenceReturn"),(0,r.kt)("p",null,"It should return the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class InferenceReturn(BaseModel):\n    """Return type for inference UI functions.\n    Take a look at the Gradio documentation for details.\n\n    Args:\n        input_components (List[Blocks]): List of Gradio input components.\n        output_components (Blocks): Gradio output component.\n        input_columns (List[str]): List of input column names matching the\n        input components.\n    """\n\n    input_components: List[IOComponent]\n    output_component: IOComponent\n    input_columns: List[str]\n')),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Create Gradio interface for image classification model"',title:'"Create',Gradio:!0,interface:!0,for:!0,image:!0,classification:!0,'model"':!0},'@inference\ndef gradio_inference(ops: ZenoOptions):\n    return InferenceReturn(\n        input_components=[gr.Image(type="filepath")],\n        output_component=gr.Text(label="Output"),\n        input_columns=[ops.data_column],\n    )\n')))}d.isMDXComponent=!0}}]);