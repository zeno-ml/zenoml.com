"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[237],{4589:(e,t,a)=>{a.r(t),a.d(t,{default:()=>V});var n=a(7294),s=a(7676),l=a(7462);const r="inactiveSelection_NgIz",o="activeSelection_w56X",i="imageContainer_G9mi",c="selectContainer_y8mD";function d(e){let{select:t}=e;return n.createElement(n.Fragment,null,n.createElement("span",null,t))}function m(e){const[t,a]=(0,n.useState)(e.default);let s=n.createElement("div",null,e.list.map(((e,s)=>n.createElement("div",{className:t==e.select?o:r,onClick:()=>a(e.select)},n.createElement(d,(0,l.Z)({key:s},e))))));return e.list.filter((e=>e.select===t))[0].select.startsWith("Your")?n.createElement("div",{id:c,style:{alignItems:"center",width:"100%"}},s,n.createElement("h2",{style:{textAlign:"center",width:"100%"}},n.createElement("a",{href:"/docs/views/new-view"},"Learn how to support your custom data type ",n.createElement("br",null),"with a single JavaScript file."))):n.createElement("div",{id:c},s,n.createElement("div",{id:i},e.list.find((e=>e.select==t)).images.map((e=>n.createElement("img",{style:{maxHeight:"175px",maxWidth:"325px",objectFit:"contain",padding:"10px",background:"white",borderRadius:"4px",border:"1px solid var(--gray)"},src:e})))))}const u=[{select:"Image Classification",images:[a(2500).Z,a(3598).Z,a(4422).Z,a(3360).Z]},{select:"Audio Transcription",images:[a(9868).Z,a(5414).Z,a(1291).Z]},{select:"Activity Recognition",images:[a(7765).Z,a(5744).Z,a(7806).Z]},{select:"Your custom data type"}];function p(){return n.createElement(m,{default:"Image Classification",list:u})}const f="left_O3yX",b="reportWrapper_ebr_",h="right_polk";let g={width:"300px",objectFit:"contain",border:"1px solid var(--gray)",borderRadius:"4px",margin:"5px",padding:"10px",background:"white"};function E(){return n.createElement("div",{className:b},n.createElement("div",{className:f,style:{}},n.createElement("img",{style:g,src:a(3252).Z}),n.createElement("img",{style:g,src:a(4165).Z}),n.createElement("img",{style:{...g,width:"400px"},src:a(4451).Z})),n.createElement("div",{className:h},n.createElement("p",{style:{fontSize:"22px"}},"Slices created in the Exploration page can be used to build interactive visualizations for deeper analyses of model behavior. Visualizations include bar charts for comparing slice performance across models and trend tables for detecting regressions in slice performance."),n.createElement("p",{style:{fontSize:"22px"}},"Zeno charts can be exported as PDFs or PNGs for sharing with other stakeholders, or shared as links for live views of model performance.")))}var v=a(9960);const y="buttons_k5hz",Z="header_Mi5r",x="headerLeft_EGEO",w="headerRight_LjIS",N="subheader_SmHf",_=a.p+"assets/medias/teaser-59d548c59356e4026ceb0a9fc8edcd36.mp4";function k(){let e=(0,n.useRef)();return n.createElement("header",{className:Z},n.createElement("div",{className:x},n.createElement("h1",null,"Evaluation for Modern AI"),n.createElement("h3",{className:N},n.createElement("b",null,"Zeno")," is a machine learning evaluation framework for exploring your data, debugging foundational models, and tracking and comparing model performance."),n.createElement("div",{className:y,style:{justifyContent:"space-between"}},n.createElement("div",{className:y},n.createElement(v.Z,{className:"button button--lg heroButtonSecondary",to:"/docs/quickstart"},"Quickstart"),n.createElement(v.Z,{className:"button button--lg heroButtonSecondary",to:"/docs/intro"},"Explore Docs")),n.createElement(v.Z,{style:{color:"var(--ifm-color-primary)"},className:"button button--lg heroButtonSecondary",to:"/docs/demos"},"Try it!"))),n.createElement("div",{className:w},n.createElement("video",{ref:e,controls:!0,width:"100%",onCanPlay:()=>{e&&(e.current.playbackRate=1.25)}},n.createElement("source",{src:_,type:"video/mp4"}))))}const C=[{title:"Explore",description:"Explore data and model outputs with customizable views for any data type",icon:a(395).Z},{title:"Evaluate",description:"Interactively discover, test and save model behavior for analysis and updates",icon:a(9556).Z},{title:"Report",description:"Create exportable visualizations and charts comparing models and slices",icon:a(4409).Z}];function I(){return n.createElement("div",{id:"section-2"},C.map(((e,t)=>n.createElement(S,(0,l.Z)({},e,{key:t})))))}function S(e){return n.createElement("div",{className:"section-container"},n.createElement("div",null,n.createElement("img",{style:{borderRadius:"5px",height:"140px",width:"140px",minHeight:"140px",minWidth:"140px",border:"1px solid #EBEBEA"},src:e.icon})),n.createElement("div",{className:"section-text-container"},n.createElement("h2",{style:{fontSize:"30px",marginBottom:"10px"}},e.title),n.createElement("p",null,e.description)))}var T=a(6010),z=a(2389),A=a(7392),P=a(7094),D=a(2466);const L="tabList__CuJ",R="tabItem_LNqP";function O(e){var t;const{lazy:a,block:s,defaultValue:r,values:o,groupId:i,className:c}=e,d=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=o??d.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),u=(0,A.l)(m,((e,t)=>e.value===t.value));if(u.length>0)throw new Error(`Docusaurus error: Duplicate values "${u.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const p=null===r?r:r??(null==(t=d.find((e=>e.props.default)))?void 0:t.props.value)??d[0].props.value;if(null!==p&&!m.some((e=>e.value===p)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${p}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:b}=(0,P.U)(),[h,g]=(0,n.useState)(p),E=[],{blockElementScrollPositionUntilNextRender:v}=(0,D.o5)();if(null!=i){const e=f[i];null!=e&&e!==h&&m.some((t=>t.value===e))&&g(e)}const y=e=>{const t=e.currentTarget,a=E.indexOf(t),n=m[a].value;n!==h&&(v(t),g(n),null!=i&&b(i,String(n)))},Z=e=>{var t;let a=null;switch(e.key){case"Enter":y(e);break;case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;a=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;a=E[t]??E[E.length-1];break}}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,T.Z)("tabs-container",L)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,T.Z)("tabs",{"tabs--block":s},c)},m.map((e=>{let{value:t,label:a,attributes:s}=e;return n.createElement("li",(0,l.Z)({role:"tab",tabIndex:h===t?0:-1,"aria-selected":h===t,key:t,ref:e=>E.push(e),onKeyDown:Z,onClick:y},s,{className:(0,T.Z)("tabs__item",R,null==s?void 0:s.className,{"tabs__item--active":h===t})}),a??t)}))),a?(0,n.cloneElement)(d.filter((e=>e.props.value===h))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},d.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==h})))))}function j(e){const t=(0,z.Z)();return n.createElement(O,(0,l.Z)({key:String(t)},e))}const B="tabItem_Ymn6";function G(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,T.Z)(B,s),hidden:a},t)}var M=a(814);function W(){return n.createElement("div",{className:"heroTwoColumn"},n.createElement("div",{className:"textLeft"},n.createElement("p",{style:{fontSize:"22px"}},"The ",n.createElement("b",null,"Python API")," is used to add models, metrics, and new metadata columns to Zeno."),n.createElement("p",{style:{fontSize:"22px"}},"The ",n.createElement("code",null,"@model")," functions wraps Python libraries such as PyTorch, Tensorflow, Keras, HuggingFace, etc. to get model predictions.\xa0",n.createElement("code",null,"@metric")," functions are used to calculate different metrics on slices of data.\xa0",n.createElement("code",null,"@distill")," ","functions derive new metadata columns from your data instances.")),n.createElement(j,{className:"tabs",groupId:"operating-systems"},n.createElement(G,{value:"model",label:"Model"},n.createElement(M.Z,{language:"py",title:"Audio transcription using the OpenAI Whisper model",showLineNumbers:!0},'@model\ndef load_model(model_path):\n  model = whisper.load_model("tiny")\n\n  def pred(df, ops: ZenoOptions):\n    # Get a list of paths for each audio file\n    files = [os.path.join(ops.data_path, f) for f in df[ops.data_column]]\n    return [model.transcribe(f)["text"] for f in files]\n\n  return pred')),n.createElement(G,{value:"Metric",label:"Metric"},n.createElement(M.Z,{language:"py",title:"Calculating accuracy",showLineNumbers:!0},"@metric\ndef accuracy(df, ops: ZenoOptions):\n  if len(df) == 0:\n    return 0\n  # Calculate the accuracy of the model if not empty\n  return 100 * (df[ops.label_column] == df[ops.output_column]).sum() / len(df)")),n.createElement(G,{value:"Distill",label:"Distill"},n.createElement(M.Z,{language:"py",title:"Disitilling a metadata column of audio amplitudes",showLineNumbers:!0},"@distill\ndef amplitude(df, ops: ZenoOptions):\n  # Get a list of paths for each audio file\n  files = [os.path.join(ops.data_path, f) for f in df[ops.data_column]]\n  amps = []\n  for audio in files:\n    # Load each audio file and calculate the amplitude\n    y, _ = librosa.load(audio)\n    amps.append(float(np.abs(y).mean()))\n  return amps"))))}function F(e){let{title:t,summary:a,description:s}=e;return n.createElement("div",{className:"header"},n.createElement("hr",{style:{marginBottom:"10px"}}),n.createElement("h1",null,a),n.createElement("h3",{className:"headerDescription"},s))}function V(){return n.createElement(s.Z,{title:"Zeno ML",description:"Machine learning evaluation framework"},n.createElement("div",{id:"homepage"},n.createElement(k,null),n.createElement("div",{id:"pageWrapper"},n.createElement(I,null),n.createElement(F,{title:"Explore",summary:"Explore your data",description:"Zeno's modular instance view can be extended to render any data type and model output"}),n.createElement(p,null),n.createElement(F,{title:"Report",summary:"Create interactive reports",description:"Track and compare performance across slices and models"}),n.createElement(E,null),n.createElement(F,{title:"Extend",summary:"Extend Zeno with the Python API",description:"Add new models, metrics, and metadata columns with the Python API"}),n.createElement(W,null))))}},7765:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1-d46c0a4b263080d82666ee3eeaa19b7c.png"},5744:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2-4616bdb492dc95a08f131845ebe3b42d.png"},7806:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/3-e3638c0d9ea86c47bb449c701d65cc20.png"},9868:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1-980212b0fdf275543928dc78ff74cf3f.png"},5414:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2-5919ac3c1c94333e95ff088275099880.png"},1291:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/3-79d496b312a35008c192942ed701c6da.png"},3252:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/chart-7dd2fd7223a29162da364db953828ba8.png"},395:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/explore-icon-b7d090ee2f89fc9e68318d22139b46bb.png"},2500:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/1-065acf00e9b9d42f12857ff063a97a18.png"},3598:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/2-a443ac7f0bb30af8720bf05fb7e14e5d.png"},4422:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/3-4abab33c28266a58ee3f41f986d74890.png"},3360:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/4-64d4ce0039f32a40e55d54c7c3029139.png"},4165:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/line-chart-0bb69d7907d827a18d547a544763a2bb.png"},4409:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/report-icon-ac10910fc864b0a2925f72cfd10a4efa.png"},9556:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/slice-icon-6ebd3fa83862ba97c746cee9c7b94bcd.png"},4451:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/trend-chart-5e24c551e3bae745181b308104cedcb2.png"}}]);