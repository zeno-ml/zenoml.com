"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[206],{9325:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=t(5893),i=t(1151);t(9286);const o={sidebar_position:1},s="Getting Started",r={id:"intro",title:"Getting Started",description:"Zeno is an interactive AI evaluation platform for exploring, debugging, and sharing how your AI systems perform.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Python Client API",permalink:"/docs/python-client"}},c={},l=[{value:"Creating a Project",id:"creating-a-project",level:2},{value:"Creating a Zeno Account",id:"creating-a-zeno-account",level:3},{value:"Using the Python API",id:"using-the-python-api",level:3},{value:"Setting up Your Data",id:"setting-up-your-data",level:3},{value:"Initializing a Project",id:"initializing-a-project",level:3},{value:"Uploading AI System Outputs",id:"uploading-ai-system-outputs",level:3},{value:"Quickstart with Zeno Build",id:"quickstart-with-zeno-build",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,a.jsxs)(n.p,{children:["Zeno is an ",(0,a.jsx)(n.strong,{children:"interactive AI evaluation platform"})," for exploring, debugging, and sharing how your AI systems perform.\nEvaluate any task and data type with Zeno's ",(0,a.jsx)(n.a,{href:"/docs/views/",children:"modular views"})," which support everything from chatbot conversations to object detection and audio transcription."]}),"\n",(0,a.jsx)(n.h2,{id:"creating-a-project",children:"Creating a Project"}),"\n",(0,a.jsxs)(n.p,{children:["The core of Zeno are ",(0,a.jsx)(n.strong,{children:"projects"}),", which consist of a base evaluation dataset and any number of AI system outputs.\nWe'll walk through creating your first project step by step, which will result in this final project example:"]}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Complete Example"}),(0,a.jsx)("div",{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from zeno_client import ZenoClient, ZenoMetric\nimport pandas as pd\n\nclient = ZenoClient("YOUR API KEY HERE")\n\ndf = pd.DataFrame(\n  {\n      "id": [1, 2, 3],\n      "text": [\n          "I love this movie!",\n          "I hate this movie!",\n          "This movie is ok.",\n      ],\n      "label": ["positive", "negative", "neutral"],\n  }\n)\n\n# Add any additional columns you want to do analysis across.\ndf["input length"] = df["text"].str.len()\n\n# Create a project.\nproject = client.create_project(\nname="Sentiment Classification",\nview="text-classification",\nmetrics=[\n    ZenoMetric(name="accuracy", type="mean", columns=["correct"]),\n  ]\n)\n\n# Upload the data.\nproject.upload_dataset(df, id_column="id", data_column=\'text\', label_column="label")\n\n# Create a system DataFrame.\ndf_system = pd.DataFrame(\n  {\n    "output": ["positive", "negative", "negative"],\n  }\n)\n\n# Create an id column to match the base dataset.\ndf_system["id"] = df_system.index\n\n# Measure accuracy for each instance, which is averaged by the ZenoMetric above.\ndf_system["correct"] = (df_system["output"] == df["label"]).astype(int)\n\nproj.upload_system(df_system, name="System A", id_column="id", output_column="output")\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"creating-a-zeno-account",children:"Creating a Zeno Account"}),"\n",(0,a.jsxs)(n.p,{children:["If you don't have a Zeno account already, create one on ",(0,a.jsx)(n.a,{href:"https://hub.zenoml.com/signup",children:"Zeno Hub"}),".\nAfter logging in to Zeno Hub, generate your API key by clicking on your profile at the top right to navigate to your ",(0,a.jsx)(n.a,{href:"https://hub.zenoml.com/account",children:"account page"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"using-the-python-api",children:"Using the Python API"}),"\n",(0,a.jsxs)(n.p,{children:["Zeno projects are created and managed using the ",(0,a.jsx)(n.code,{children:"zeno-client"})," Python library:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install zeno-client\n"})}),"\n",(0,a.jsx)(n.p,{children:"We can now initialize a client with the API key which we will use to create projects and upload data."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from zeno_client import ZenoClient, ZenoMetric\nimport pandas as pd\n\n# Initialize a client with our API key.\nclient = ZenoClient("YOUR API KEY HERE")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"setting-up-your-data",children:"Setting up Your Data"}),"\n",(0,a.jsxs)(n.p,{children:["Zeno projects take data and model outputs as ",(0,a.jsx)(n.strong,{children:"Pandas DataFrames"}),".\nIn this example, we will upload a toy example of sentiment classification with 3 instances and ground truth labels:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'...\n\n# Put all data in a Pandas DataFrame\ndf = pd.DataFrame(\n    {\n        "id": [1, 2, 3],\n        "text": [\n            "I love this movie!",\n            "I hate this movie!",\n            "This movie is ok.",\n        ],\n        "label": ["positive", "negative", "neutral"],\n    }\n)\n\n# Add any additional columns you want to do analysis across.\ndf["input length"] = df["text"].str.len()\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Every DataFrame in Zeno requires a unique ",(0,a.jsx)(n.code,{children:"id_column"})," that identifies each instance. This is used to match the base dataset with system outputs."]})}),"\n",(0,a.jsx)(n.h3,{id:"initializing-a-project",children:"Initializing a Project"}),"\n",(0,a.jsxs)(n.p,{children:["We can now initialize a ",(0,a.jsx)(n.strong,{children:"project"})," using the client and upload our base dataset:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'...\n\nproject = client.create_project(\n    name="Sentiment Classification",\n    view="text-classification",\n    metrics=[\n        ZenoMetric(name="accuracy", type="mean", columns=["correct"]),\n    ]\n)\n\nproject.upload_dataset(df, id_column="id", data_column=\'text\', label_column="label")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["We named our project ",(0,a.jsx)(n.em,{children:"Sentiment Classification"})," and specified to use the ",(0,a.jsx)(n.em,{children:"text_classification"})," view.\nWe also added an ",(0,a.jsx)(n.em,{children:"accuracy"})," metric which takes the mean of the ",(0,a.jsx)(n.code,{children:"correct"})," column that will be present in the system outputs we upload later."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about Zeno's ",(0,a.jsx)(n.code,{children:"view"})," specification in the ",(0,a.jsx)(n.a,{href:"/docs/views",children:"instance view docs"}),".\nYou can find the default supported views ",(0,a.jsx)(n.a,{href:"/docs/views/existing",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"uploading-ai-system-outputs",children:"Uploading AI System Outputs"}),"\n",(0,a.jsxs)(n.p,{children:["Lastly, we can upload our AI system outputs to the project.\nWe add an ",(0,a.jsx)(n.code,{children:"id"})," column to match the base dataset and a ",(0,a.jsx)(n.code,{children:"correct"})," column that measures accuracy for each instance."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'...\n\ndf_system = pd.DataFrame(\n    {\n        "output": ["positive", "negative", "negative"],\n    }\n)\n\n# Create an id column to match the base dataset.\ndf_system["id"] = df_system.index\n\n# Measure accuracy for each instance, which is averaged by the ZenoMetric above.\ndf_system["correct"] = (df_system["output"] == df["label"]).astype(int)\n\nproj.upload_system(df_system, name="System A", id_column="id", output_column="output")\n'})}),"\n",(0,a.jsx)(n.p,{children:"You can now navigate to the project URL in Zeno Hub to see the uploaded data and metrics and start exploring your AI system's performance!"}),"\n",(0,a.jsx)(n.h2,{id:"quickstart-with-zeno-build",children:"Quickstart with Zeno Build"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/zeno-ml/zeno-build",children:"Zeno Build"})," is a collection of example projects for common AI and ML tasks. Check out some common Zeno Build notebooks:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/zeno-ml/zeno-build/tree/main/examples/eleuther_harness",children:"EleutherAI LM Evaluation Harness"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/zeno-ml/zeno-build/tree/main/examples/open_llm_leaderboard",children:"\ud83e\udd17 OpenLLM Leaderboard"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/zeno-ml/zeno-build/tree/main/examples/transcription",children:"Audio Transcription Bias"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);