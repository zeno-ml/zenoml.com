"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[539],{3393:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});var t=s(5893),l=s(1151);const c={sidebar_position:3},i="Python Client API",r={id:"python-client",title:"Python Client API",description:"The Python client is used to create projects and upload data.",source:"@site/docs/python-client.mdx",sourceDirName:".",slug:"/python-client",permalink:"/docs/python-client",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Using Zeno",permalink:"/docs/using-zeno"},next:{title:"Instance Views",permalink:"/docs/views/"}},o={},d=[{value:"ZenoMetric Objects",id:"zenometric-objects",level:2},{value:"ZenoProject Objects",id:"zenoproject-objects",level:2},{value:"upload_dataset",id:"upload_dataset",level:4},{value:"upload_system",id:"upload_system",level:4},{value:"delete_system",id:"delete_system",level:4},{value:"delete_all_systems",id:"delete_all_systems",level:4},{value:"ZenoClient Objects",id:"zenoclient-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"create_project",id:"create_project",level:4},{value:"get_project",id:"get_project",level:4}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"python-client-api",children:"Python Client API"}),"\n",(0,t.jsx)(n.p,{children:"The Python client is used to create projects and upload data."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install zeno-client\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Please see ",(0,t.jsx)(n.a,{href:"/docs/intro#creating-a-project",children:"Creating a Project"})," to learn how to use the client."]}),"\n",(0,t.jsx)("a",{id:"client.ZenoMetric"}),"\n",(0,t.jsx)(n.h2,{id:"zenometric-objects",children:"ZenoMetric Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class ZenoMetric(BaseModel)\n"})}),"\n",(0,t.jsx)(n.p,{children:"A metric to calculate for a Zeno project."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," ",(0,t.jsx)(n.em,{children:"int"})," - The ID of the metric. -1 if not set."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The name of the metric."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"})," ",(0,t.jsx)(n.em,{children:"str"}),' - The type of metric to calculate. Currently only "mean".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"columns"})," ",(0,t.jsx)(n.em,{children:"list[str]"})," - The columns to calculate the metric on.\nEmpty list if not set."]}),"\n"]}),"\n",(0,t.jsx)("a",{id:"client.ZenoProject"}),"\n",(0,t.jsx)(n.h2,{id:"zenoproject-objects",children:"ZenoProject Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class ZenoProject()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Provides data upload functionality for a Zeno project."}),"\n",(0,t.jsx)(n.p,{children:"Should NOT be initialized directly, but rather through the ZenoClient."}),"\n",(0,t.jsx)("a",{id:"client.ZenoProject.upload_dataset"}),"\n",(0,t.jsx)(n.h4,{id:"upload_dataset",children:"upload_dataset"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def upload_dataset(df: pd.DataFrame,\n                   *,\n                   id_column: str,\n                   data_column: Optional[str] = None,\n                   label_column: Optional[str] = None)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Upload a dataset to a Zeno project."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"df"})," ",(0,t.jsx)(n.em,{children:"pd.DataFrame"})," - The dataset to upload as a Pandas DataFrame."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id_column"})," ",(0,t.jsx)(n.em,{children:"str"})," - Column name containing unique instance IDs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data_column"})," ",(0,t.jsx)(n.em,{children:"str | None, optional"})," - Column containing the\ninstance data. This can be raw data for data types such as\ntext, or URLs for large media data such as images and videos.\nDefaults to None."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"label_column"})," ",(0,t.jsx)(n.em,{children:"str | None, optional"})," - Column containing the\ninstance labels. Defaults to None."]}),"\n"]}),"\n",(0,t.jsx)("a",{id:"client.ZenoProject.upload_system"}),"\n",(0,t.jsx)(n.h4,{id:"upload_system",children:"upload_system"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def upload_system(df: pd.DataFrame, *, name: str, id_column: str,\n                  output_column: str)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Upload a system to a Zeno project."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"df"})," ",(0,t.jsx)(n.em,{children:"pd.DataFrame"})," - The dataset to upload."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The name of the system to upload."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id_column"})," ",(0,t.jsx)(n.em,{children:"str"})," - The name of the column containing the instance IDs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"output_column"})," ",(0,t.jsx)(n.em,{children:"str"})," - The name of the column containing the system output."]}),"\n"]}),"\n",(0,t.jsx)("a",{id:"client.ZenoProject.delete_system"}),"\n",(0,t.jsx)(n.h4,{id:"delete_system",children:"delete_system"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def delete_system(name: str)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Delete a system from a Zeno project."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The name of the system to delete."]}),"\n"]}),"\n",(0,t.jsx)("a",{id:"client.ZenoProject.delete_all_systems"}),"\n",(0,t.jsx)(n.h4,{id:"delete_all_systems",children:"delete_all_systems"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def delete_all_systems()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Delete all systems from a Zeno project."}),"\n",(0,t.jsx)("a",{id:"client.ZenoClient"}),"\n",(0,t.jsx)(n.h2,{id:"zenoclient-objects",children:"ZenoClient Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class ZenoClient()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Client class for data upload functionality to Zeno."}),"\n",(0,t.jsx)("a",{id:"client.ZenoClient.__init__"}),"\n",(0,t.jsx)(n.h4,{id:"__init__",children:"__init__"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def __init__(api_key: str, *, endpoint: str = DEFAULT_BACKEND) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Initialize the ZenoClient object for API upload calls."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"api_key"})," ",(0,t.jsx)(n.em,{children:"str"})," - the API key to authenticate uploads with."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"endpoint"})," ",(0,t.jsx)(n.em,{children:"str, optional"})," - the base URL of the Zeno backend.\nDefaults to DEFAULT_BACKEND."]}),"\n"]}),"\n",(0,t.jsx)("a",{id:"client.ZenoClient.create_project"}),"\n",(0,t.jsx)(n.h4,{id:"create_project",children:"create_project"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def create_project(*,\n                   name: str,\n                   view: Union[str, Dict] = "",\n                   description: str = "",\n                   metrics: List[ZenoMetric] = [],\n                   samples_per_page: int = 10,\n                   public: bool = False) -> ZenoProject\n'})}),"\n",(0,t.jsx)(n.p,{children:"Creates an empty project in Zeno's backend."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The name of the project to be created. The project will be\ncreated under the current user, e.g. username/name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"view"})," ",(0,t.jsx)(n.em,{children:"Union[str, Dict], optional"}),' - The view to use for the project.\nDefaults to "".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"})," ",(0,t.jsx)(n.em,{children:"str, optional"}),' - The description of the project. Defaults to "".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"metrics"})," ",(0,t.jsx)(n.em,{children:"list[ZenoMetric], optional"})," - The metrics to calculate for the\nproject. Defaults to []."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"samples_per_page"})," ",(0,t.jsx)(n.em,{children:"int, optional"})," - The number of samples to show per page.\nDefaults to 10."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"public"})," ",(0,t.jsx)(n.em,{children:"bool, optional"})," - Whether the project is public. Defaults to False."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(n.p,{children:"ZenoProject | None: The created project object or None if the project could\nnot be created."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ValidationError"})," - If the config does not match the ProjectConfig schema."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"APIError"})," - If the project could not be created."]}),"\n"]}),"\n",(0,t.jsx)("a",{id:"client.ZenoClient.get_project"}),"\n",(0,t.jsx)(n.h4,{id:"get_project",children:"get_project"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def get_project(owner_name: str, project_name: str) -> ZenoProject\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get a project object by its owner and name."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"owner_name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The owner of the project to get."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"project_name"})," ",(0,t.jsx)(n.em,{children:"str"})," - The name of the project to get."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(n.p,{children:"Project | None: The project object or None if the project could not be\nfound."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"APIError"})," - If the project could not be found."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);